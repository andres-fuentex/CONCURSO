import streamlit as st
import geopandas as gpd
import requests
import folium
from streamlit_folium import st_folium
from shapely.geometry import Point, MultiPoint
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
from io import BytesIO
import json
import pandas as pd
import time

# --- Configuraci√≥n de la P√°gina ---
st.set_page_config(
    page_title="Bogot√° Inteligente: Diagn√≥stico Territorial",
    page_icon="üó∫Ô∏è",
    layout="wide"
)

st.title("üöÄ Bogot√° Inteligente: Explora el Potencial de tu Ciudad con Datos")

st.markdown("""
**Bienvenido al futuro del an√°lisis urbano en Bogot√°.**

Imagina poder mapear, entender y transformar tu entorno utilizando la ciencia de datos, ¬°todo en un solo clic!

Esta plataforma pone en tus manos el poder de la informaci√≥n geoespacial p√∫blica para revelar oportunidades de desarrollo, detectar brechas de servicios y optimizar decisiones en planificaci√≥n territorial.

A trav√©s de una experiencia interactiva, recorrer√°s paso a paso el proceso de diagn√≥stico: selecciona tu localidad, explora el √°rea de influencia y descubre ‚Äîde manera visual, autom√°tica y comparativa‚Äî los servicios, la educaci√≥n, el transporte y mucho m√°s, con el respaldo de datos abiertos.

_Convierte los datos en visi√≥n. Descubre el potencial oculto de cada rinc√≥n de Bogot√°. El an√°lisis comienza aqu√≠._
""")

# --- Funci√≥n cacheada para la carga de datos ---
@st.cache_data
def cargar_datasets():
    """Carga los datasets geogr√°ficos urbanos desde fuentes abiertas"""
    datasets = {
        "localidades": "https://github.com/andres-fuentex/tfm-avm-bogota/raw/main/datos_visualizacion/datos_geograficos_geo/dim_localidad.geojson",
        "areas": "https://github.com/andres-fuentex/tfm-avm-bogota/raw/main/datos_visualizacion/datos_geograficos_geo/dim_area.geojson",
        "manzanas": "https://github.com/andres-fuentex/tfm-avm-bogota/raw/main/datos_visualizacion/datos_geograficos_geo/tabla_hechos.geojson",
        "transporte": "https://github.com/andres-fuentex/tfm-avm-bogota/raw/main/datos_visualizacion/datos_geograficos_geo/dim_transporte.geojson",
        "colegios": "https://github.com/andres-fuentex/tfm-avm-bogota/raw/main/datos_visualizacion/datos_geograficos_geo/dim_colegios.geojson"
    }
    dataframes = {}
    for nombre, url in datasets.items():
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        geojson_data = json.loads(response.text)
        dataframes[nombre] = gpd.GeoDataFrame.from_features(
            geojson_data["features"], crs="EPSG:4326"
        )
    return dataframes

# --- Inicializaci√≥n del estado ---
if "step" not in st.session_state:
    st.session_state.step = 1

# ========================================
# PASO 1: CARGA DE DATOS
# ========================================
if st.session_state.step == 1:
    st.markdown("""
    ### üö¶ Punto de partida: Activando el diagn√≥stico urbano

    Antes de comenzar, el sistema recopila y verifica los datos esenciales de la ciudad para tu an√°lisis.
    Este proceso conectar√° fuentes oficiales y consolidar√° informaci√≥n geoespacial clave para que tu exploraci√≥n territorial sea s√≥lida y confiable.
    """)
    
    st.info(
        "üîÑ **Preparando el escenario digital:**\n\n"
        "En segundos tendr√°s acceso a la radiograf√≠a inteligente de Bogot√°, utilizando fuentes oficiales de datos abiertos urban√≠sticos."
    )

    # Usar spinner para indicar proceso de carga
    with st.spinner('‚è≥ Conectando y descargando los datasets urbanos...'):
        try:
            dataframes = cargar_datasets()
        except Exception as e:
            st.error(f"‚ùå Error al cargar los datos: {e}")
            st.stop()

    if dataframes:
        st.success('‚úÖ Datos cargados exitosamente. ¬°Listo para iniciar tu an√°lisis!')
        if st.button("üîç Empezar diagn√≥stico"):
            for nombre, df in dataframes.items():
                st.session_state[nombre] = df
            st.session_state.step = 2
            st.rerun()
    else:
        st.error("‚ùå Ocurri√≥ un problema al cargar los datos. Verifica tu conexi√≥n o int√©ntalo nuevamente en unos minutos.")


# ========================================
# PASO 2: SELECCI√ìN DE LOCALIDAD
# ========================================
elif st.session_state.step == 2:
    st.header("üåÜ Paso 1: Selecciona tu Localidad de Inter√©s")

    st.markdown("""
    **¬øD√≥nde comienza tu an√°lisis?**
    Haz clic sobre la localidad de Bogot√° que deseas explorar. El sistema te mostrar√° un mapa interactivo con l√≠mites administrativos oficiales.
    El color azul suave resalta el √°rea elegida; al pasar el mouse, el borde rojo reforzar√° tu selecci√≥n. Toda la plataforma mantiene un estilo gr√°fico uniforme para garantizar claridad y profesionalismo.
    """)

    # Estilos generales unificados para todas las visualizaciones
    COLOR_FRAME = "#131313"        # Marco general, negro-gris
    COLOR_FILL = "#3D8EDB"         # Relleno principal, azul corporativo
    COLOR_HI_FILL = "#E7F5FF"      # Relleno al hover, azul muy claro
    COLOR_BORDER = "#C22323"       # Borde destacado en hover, rojo intenso

    localidades = st.session_state.localidades

    # Crear mapa interactivo con Folium
    bounds = localidades.total_bounds
    center = [(bounds[1] + bounds[3]) / 2, (bounds[0] + bounds[2]) / 2]

    mapa = folium.Map(location=center, zoom_start=11, tiles="CartoDB positron")
    
    # Marco y estilos de localidad
    folium.GeoJson(
        localidades,
        style_function=lambda feature: {
            "fillColor": COLOR_FILL,
            "color": COLOR_FRAME,
            "weight": 2,
            "fillOpacity": 0.35,       # Un poco m√°s visible
        },
        highlight_function=lambda feature: {
            "weight": 3,
            "color": COLOR_BORDER,
            "fillColor": COLOR_HI_FILL,
            "fillOpacity": 0.55,
        },
        tooltip=folium.GeoJsonTooltip(
            fields=["nombre_localidad"],
            aliases=["Localidad:"],
            labels=False,
            sticky=True
        )
    ).add_to(mapa)

    # Uniformidad en tama√±o del lienzo para todas las visualizaciones
    result = st_folium(mapa, width=900, height=600, returned_objects=["last_clicked"])

    # Detectar clic en localidad
    clicked = result.get("last_clicked")
    if clicked and "lat" in clicked and "lng" in clicked:
        punto = Point(clicked["lng"], clicked["lat"])
        for _, row in localidades.iterrows():
            if row["geometry"].contains(punto):
                st.session_state.localidad_clic = row["nombre_localidad"]
                break
        else:
            st.session_state.localidad_clic = None

    # Mostrar localidad seleccionada
    if "localidad_clic" in st.session_state and st.session_state.localidad_clic:
        st.success(f"‚úÖ Localidad seleccionada: **{st.session_state.localidad_clic}**")
        if st.button("‚úÖ Confirmar y Continuar"):
            st.session_state.localidad_sel = st.session_state.localidad_clic
            st.session_state.step = 3
            st.rerun()

    st.markdown("---")
    if st.button("üîÑ Volver al Inicio"):
        st.session_state.step = 1
        st.rerun()


# ========================================
# PASO 3: DEFINIR √ÅREA DE INFLUENCIA
# ========================================
elif st.session_state.step == 3:
    st.header("üìè Paso 2: Define el radio de tu an√°lisis urbano")

    st.markdown(f"""
    **Localidad seleccionada:** `{st.session_state.localidad_sel}`  
    
    El radio de an√°lisis determina el √°rea de influencia que se estudiar√° alrededor del punto que escojas en el mapa.
    Decide qu√© tan amplio quieres que sea tu contexto urbano y ajusta el valor en metros para comparar sectores de forma homog√©nea.
    """)

    # Saltos de 300 en 300 para mejor usabilidad mobile/desktop
    radio_analisis = st.slider(
        "Selecciona el radio de an√°lisis (metros)",
        min_value=300,
        max_value=2100,
        value=600,
        step=300,
        help="Entre m√°s grande el radio, m√°s contexto y servicios urbanos tendr√°s en el an√°lisis."
    )
    st.session_state.radio_analisis = radio_analisis

    st.info(f"üü† El an√°lisis incluir√° una zona de **{radio_analisis} metros** alrededor del punto que selecciones en el siguiente paso.")

    # Botones de navegaci√≥n
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîô Volver a selecci√≥n de localidad"):
            st.session_state.step = 2
            st.rerun()
    with col2:
        if st.button("‚û°Ô∏è Continuar"):
            st.session_state.step = 4
            st.rerun()


# ========================================
# PASO 4: SELECCI√ìN DE PUNTO DE INTER√âS
# ========================================
elif st.session_state.step == 4:
    st.header("üìç Paso 3: Selecciona el punto sobre el cual analizar√°s el entorno")

    st.markdown(f"""
    **Localidad elegida:** `{st.session_state.localidad_sel}`  
    **Radio de an√°lisis:** `{st.session_state.radio_analisis} metros`

    Haz clic directamente sobre la zona que deseas estudiar en detalle. 
    El sistema aplicar√° el radio seleccionado para analizar el entorno urbano alrededor del punto que escojas.
    """)

    localidades = st.session_state.localidades

    # Filtrar por localidad seleccionada
    cod_localidad = localidades[
        localidades["nombre_localidad"] == st.session_state.localidad_sel
    ]["num_localidad"].values[0]

    localidad_geo = localidades[localidades["num_localidad"] == cod_localidad]

    # Colores uniformes
    COLOR_FILL = "#E4EB83"  # Relleno claro
    COLOR_BORDER = "#FF0000"  # Borde rojo

    # Crear mapa con cursor cruz
    bounds = localidad_geo.total_bounds
    center = [(bounds[1] + bounds[3]) / 2, (bounds[0] + bounds[2]) / 2]

    mapa = folium.Map(
        location=center,
        zoom_start=12,
        tiles="CartoDB positron",
        prefer_canvas=True
    )

    # Pol√≠gono de localidad visual uniforme
    folium.GeoJson(
        localidad_geo,
        style_function=lambda feature: {
            "fillColor": COLOR_FILL,
            "color": COLOR_BORDER,
            "weight": 3,
            "fillOpacity": 0.35,
            "interactive": True
        },
        highlight_function=lambda feature: {
            "fillColor": "#F7C28E",
            "color": COLOR_BORDER,
            "weight": 4,
            "fillOpacity": 0.45
        }
    ).add_to(mapa)

    # CSS para cursor de cruz
    cursor_css = """
    <style>
        .folium-map, .leaflet-container, .leaflet-interactive, .leaflet-grab {
            cursor: crosshair !important;
        }
        .leaflet-dragging .leaflet-grab {
            cursor: move !important;
        }
    </style>
    """
    mapa.get_root().html.add_child(folium.Element(cursor_css))

    # Renderizar mapa interactivo
    result = st_folium(mapa, width=900, height=600, returned_objects=["last_clicked"], key="mapa_punto_interes")

    # Captura clic y muestra detalles con storytelling
    clicked = result.get("last_clicked")
    if clicked and "lat" in clicked and "lng" in clicked:
        st.session_state.punto_lat = clicked["lat"]
        st.session_state.punto_lon = clicked["lng"]

        st.success(
            f"üìç Punto seleccionado correctamente. "
            f"El an√°lisis de entorno abarcar√° un radio de `{st.session_state.radio_analisis} metros` desde aqu√≠."
        )

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Latitud", f"{clicked['lat']:.6f}")
        with col2:
            st.metric("Longitud", f"{clicked['lng']:.6f}")
        with col3:
            st.metric("Radio de an√°lisis", f"{st.session_state.radio_analisis} m")

        if st.button("‚úÖ Confirmar y generar visualizaciones", type="primary", use_container_width=True):
            st.session_state.step = 5
            st.rerun()
    else:
        st.info("üëÜ Haz clic sobre el mapa para elegir tu punto de estudio.")

    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîô Volver al paso anterior", use_container_width=True):
            st.session_state.step = 3
            st.rerun()
    with col2:
        if st.button("üîÑ Reiniciar an√°lisis", use_container_width=True):
            st.session_state.step = 1
            st.rerun()

# ========================================
# PASO 5: GENERACI√ìN DE MAPAS Y AN√ÅLISIS
# ========================================
elif st.session_state.step == 5:
    st.header("üìä Diagn√≥stico Urbano Completo")

    st.markdown(f"""
    <b>Localidad seleccionada:</b> {st.session_state.localidad_sel}  
    <b>Radio de an√°lisis:</b> {st.session_state.radio_analisis} metros  
    <b>Punto de inter√©s:</b> Lat {st.session_state.punto_lat:.6f}, Lon {st.session_state.punto_lon:.6f}

    La herramienta generar√° visualizaciones y m√©tricas que describen el entorno urbano alrededor del punto elegido. Analiza la densidad, acceso a servicios y el contexto socioespacial de la zona seleccionada.
    """, unsafe_allow_html=True)

    # Cargar datos
    localidades = st.session_state.localidades
    manzanas = st.session_state.manzanas
    transporte = st.session_state.transporte
    colegios = st.session_state.colegios
    areas = st.session_state.areas

    # Obtener c√≥digo de localidad
    cod_localidad = localidades[
        localidades["nombre_localidad"] == st.session_state.localidad_sel
    ]["num_localidad"].values[0]

    # Crear punto y √°rea de an√°lisis
    punto = Point(st.session_state.punto_lon, st.session_state.punto_lat)
    punto_gdf = gpd.GeoDataFrame([{"geometry": punto}], crs="EPSG:4326")
    punto_proj = punto_gdf.to_crs(epsg=3116)
    area_proj = punto_proj.buffer(st.session_state.radio_analisis)
    area_wgs = area_proj.to_crs(epsg=4326).iloc[0]

    # Filtrar datos dentro del √°rea de an√°lisis
    manzanas_zona = manzanas[manzanas.geometry.intersects(area_wgs)]

    # Contar estaciones de transporte dentro del √°rea de an√°lisis
    estaciones_zona = []
    for _, row in transporte.iterrows():
        if hasattr(row["geometry"], "geoms"):
            for pt in row["geometry"].geoms:
                if area_wgs.contains(pt):
                    estaciones_zona.append(pt)
        elif isinstance(row["geometry"], Point):
            if area_wgs.contains(row["geometry"]):
                estaciones_zona.append(row["geometry"])

    # Contar colegios dentro del √°rea de an√°lisis
    colegios_zona = []
    for _, row in colegios.iterrows():
        if hasattr(row["geometry"], "geoms"):
            for pt in row["geometry"].geoms:
                if area_wgs.contains(pt):
                    colegios_zona.append(pt)
        elif isinstance(row["geometry"], Point):
            if area_wgs.contains(row["geometry"]):
                colegios_zona.append(row["geometry"])

    
 
    
    # ========================================
    # VISUALIZACI√ìN: MAPA DE ESTACIONES DE TRANSPORTE
    # ========================================
    st.markdown("""
    ### üöá Accesibilidad en Transporte P√∫blico

    En este mapa puedes visualizar todas las estaciones de transporte p√∫blico dentro del √°rea de an√°lisis determinada. 
    Cada punto rojo representa una estaci√≥n disponible alrededor del punto seleccionado, ayud√°ndote a entender la conectividad y accesibilidad de la zona.

    El √°rea sombreada muestra el alcance del entorno estudiado, manteniendo la uniformidad est√©tica en todos los mapas y m√©tricas urbanas.
    """)

    # Detecta las estaciones dentro de la zona circular de an√°lisis
    estaciones_area = []
    estaciones_coords = []
    nombres_estaciones = []  # Nueva lista para almacenar nombres

    for _, row in transporte.iterrows():
        geom = row["geometry"]
        nombres_row = row.get("nombres", "Estaci√≥n sin nombre")  # Obtener nombres de la fila
        
        # Separar nombres si hay m√∫ltiples estaciones (separadas por ";")
        lista_nombres = [n.strip() for n in str(nombres_row).split(";")]
        
        # Manejar Multipoint y Point simple
        if hasattr(geom, "geoms"):
            for idx, pt in enumerate(geom.geoms):
                if area_wgs.contains(pt):
                    coord_tuple = (pt.x, pt.y)
                    if coord_tuple not in estaciones_coords:
                        estaciones_area.append(pt)
                        estaciones_coords.append(coord_tuple)
                        # Asignar nombre correspondiente o gen√©rico si no hay suficientes
                        nombre = lista_nombres[idx] if idx < len(lista_nombres) else lista_nombres[0]
                        nombres_estaciones.append(nombre)
        elif isinstance(geom, Point):
            if area_wgs.contains(geom):
                coord_tuple = (geom.x, geom.y)
                if coord_tuple not in estaciones_coords:
                    estaciones_area.append(geom)
                    estaciones_coords.append(coord_tuple)
                    nombres_estaciones.append(lista_nombres[0] if lista_nombres else "Estaci√≥n")

    fig_transporte = go.Figure()

    # Render destacado y uniforme del √°rea
    fig_transporte.add_trace(go.Scattermapbox(
        lat=list(area_wgs.exterior.xy[1]),
        lon=list(area_wgs.exterior.xy[0]),
        mode='lines',
        fill='toself',
        name=f'√Årea de an√°lisis ({st.session_state.radio_analisis}m)',
        fillcolor='rgba(255, 165, 0, 0.12)',
        line=dict(color='orange', width=2)
    ))

    # Los puntos de estaciones con nombres reales en el tooltip
    if estaciones_area:
        lats = [pt.y for pt in estaciones_area]
        lons = [pt.x for pt in estaciones_area]

        fig_transporte.add_trace(go.Scattermapbox(
            lat=lats,
            lon=lons,
            mode='markers',
            name='Estaciones de Transporte',
            marker=dict(
                size=14,
                color='#E63946',
                opacity=0.95,
                symbol='circle'
            ),
            text=nombres_estaciones,  # Usar nombres reales
            hoverinfo='text'
        ))

    # Punto central seleccionado por el usuario
    fig_transporte.add_trace(go.Scattermapbox(
        lat=[st.session_state.punto_lat],
        lon=[st.session_state.punto_lon],
        mode='markers',
        name='Punto de inter√©s',
        marker=dict(
            size=17,
            color='#3498DB'
        )
    ))

    fig_transporte.update_layout(
        mapbox_style="carto-positron",
        mapbox_center={"lat": st.session_state.punto_lat, "lon": st.session_state.punto_lon},
        mapbox_zoom=14,
        margin={"r": 0, "t": 40, "l": 0, "b": 0},
        title=f"Estaciones de transporte p√∫blico (radio {st.session_state.radio_analisis} m)",
        showlegend=True,
        height=600
    )

    st.plotly_chart(fig_transporte, use_container_width=True)

    # M√©tricas visuales uniformes
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Estaciones en el entorno", len(estaciones_area))
    with col2:
        if estaciones_area:
            densidad = len(estaciones_area) / (3.14159 * (st.session_state.radio_analisis / 1000) ** 2)
            st.metric("Densidad de estaciones\n (por km¬≤)", f"{densidad:.2f}")


    # ========================================
    # VISUALIZACI√ìN: MAPA DE CENTROS EDUCATIVOS
    # ========================================
    st.markdown("""
    ### üè´ Oferta Educativa en el Entorno

    Visualiza todos los centros educativos dentro del √°rea de an√°lisis que seleccionaste. 
    Cada punto morado representa la ubicaci√≥n de un colegio disponible para la comunidad, facilitando la evaluaci√≥n de acceso educativo y nivel de cobertura del sector.

    El √°rea sombreada corresponde a los metros de radio definidos, manteniendo la uniformidad visual en toda la plataforma.
    """)

    # Detectar colegios dentro del √°rea circular de an√°lisis
    colegios_area = []
    colegios_coords = []
    nombres_colegios = []  # Nueva lista para almacenar nombres

    for _, row in colegios.iterrows():
        geom = row["geometry"]
        nombres_row = row.get("nombres", "Colegio sin nombre")  # Obtener nombres de la fila
        
        # Separar nombres si hay m√∫ltiples colegios (separados por ";")
        lista_nombres = [n.strip() for n in str(nombres_row).split(";")]
        
        # Manejar MultiPoint y Point simple
        if hasattr(geom, "geoms"):
            for idx, pt in enumerate(geom.geoms):
                if area_wgs.contains(pt):
                    coord_tuple = (pt.x, pt.y)
                    if coord_tuple not in colegios_coords:
                        colegios_area.append(pt)
                        colegios_coords.append(coord_tuple)
                        # Asignar nombre correspondiente o gen√©rico si no hay suficientes
                        nombre = lista_nombres[idx] if idx < len(lista_nombres) else lista_nombres[0]
                        nombres_colegios.append(nombre)
        elif isinstance(geom, Point):
            if area_wgs.contains(geom):
                coord_tuple = (geom.x, geom.y)
                if coord_tuple not in colegios_coords:
                    colegios_area.append(geom)
                    colegios_coords.append(coord_tuple)
                    nombres_colegios.append(lista_nombres[0] if lista_nombres else "Colegio")

    fig_educacion = go.Figure()

    # √Årea de an√°lisis sombreada con estilo uniforme
    fig_educacion.add_trace(go.Scattermapbox(
        lat=list(area_wgs.exterior.xy[1]),
        lon=list(area_wgs.exterior.xy[0]),
        mode='lines',
        fill='toself',
        name=f'√Årea de an√°lisis ({st.session_state.radio_analisis}m)',
        fillcolor='rgba(128, 0, 128, 0.07)',  # Morado muy suave
        line=dict(color='#6C3483', width=2)
    ))

    # Puntos de colegios con nombres reales en el tooltip
    if colegios_area:
        lats = [pt.y for pt in colegios_area]
        lons = [pt.x for pt in colegios_area]

        fig_educacion.add_trace(go.Scattermapbox(
            lat=lats,
            lon=lons,
            mode='markers',
            name='Colegios',
            marker=dict(
                size=13,
                color='#8E44AD',   # Morado
                opacity=0.88,
                symbol='circle'
            ),
            text=nombres_colegios,  # Usar nombres reales
            hoverinfo='text'
        ))

    # Punto central seleccionado por el usuario (azul est√°ndar del flujo)
    fig_educacion.add_trace(go.Scattermapbox(
        lat=[st.session_state.punto_lat],
        lon=[st.session_state.punto_lon],
        mode='markers',
        name='Punto de inter√©s',
        marker=dict(
            size=17,
            color='#3498DB'
        )
    ))

    fig_educacion.update_layout(
        mapbox_style="carto-positron",
        mapbox_center={"lat": st.session_state.punto_lat, "lon": st.session_state.punto_lon},
        mapbox_zoom=14,
        margin={"r": 0, "t": 40, "l": 0, "b": 0},
        title=f"Centros educativos en el entorno ({len(colegios_area)} colegios)",
        showlegend=True,
        height=600
    )

    st.plotly_chart(fig_educacion, use_container_width=True)

    # M√©tricas profesionalizadas
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Colegios en el entorno", len(colegios_area))
    with col2:
        if colegios_area:
            densidad = len(colegios_area) / (3.14159 * (st.session_state.radio_analisis / 1000) ** 2)
            st.metric("Densidad educativa\n (por km¬≤)", f"{densidad:.2f}")

        # ========================================
    # VISUALIZACI√ìN: COMPOSICI√ìN SOCIOECON√ìMICA (ESTRATO)
    # ========================================
    st.markdown("""
    ### üèòÔ∏è Composici√≥n Socioecon√≥mica en el Entorno

    En este mapa exploramos c√≥mo se distribuyen los diferentes estratos socioecon√≥micos dentro del √°rea de an√°lisis seleccionada.
    Cada pol√≠gono corresponde a una manzana urbana y el color representa el estrato predominante en cada una, ayudando a visualizar la diversidad y estructura social del sector.

    La leyenda te ayudar√° a identificar r√°pidamente c√≥mo se organiza el tejido urbano alrededor de tu punto de inter√©s.
    """)

    # Colores consistentes para cada estrato
    estratos_unicos = sorted(manzanas_zona["estrato"].unique())
    color_estrato = {
        1: '#8B0000',  # Rojo oscuro
        2: '#FF4500',  # Rojo naranja
        3: '#FFD700',  # Dorado
        4: '#90EE90',  # Verde claro
        5: '#4169E1',  # Azul real
        6: '#9370DB'   # P√∫rpura medio
    }

    fig_estrato = go.Figure()

    # Marco del √°rea de an√°lisis (naranja uniforme con el resto)
    fig_estrato.add_trace(go.Scattermapbox(
        lat=list(area_wgs.exterior.xy[1]),
        lon=list(area_wgs.exterior.xy[0]),
        mode='lines',
        name=f'√Årea de an√°lisis ({st.session_state.radio_analisis}m)',
        line=dict(color='orange', width=2),
        showlegend=False
    ))

    # Agrupa y pinta las manzanas por estrato, leyenda compacta
    trazas_agregadas = set()
    for estrato in estratos_unicos:
        manzanas_estrato = manzanas_zona[manzanas_zona["estrato"] == estrato]
        for idx, (_, manzana) in enumerate(manzanas_estrato.iterrows()):
            if manzana.geometry.geom_type == 'Polygon':
                coords = list(manzana.geometry.exterior.coords)
                mostrar_leyenda = estrato not in trazas_agregadas
                if mostrar_leyenda:
                    trazas_agregadas.add(estrato)
                fig_estrato.add_trace(go.Scattermapbox(
                    lat=[c[1] for c in coords],
                    lon=[c[0] for c in coords],
                    mode='lines',
                    fill='toself',
                    fillcolor=color_estrato.get(estrato, '#808080'),
                    line=dict(color='black', width=0.5),
                    name=f'Estrato {estrato}',
                    showlegend=mostrar_leyenda,
                    legendgroup=f'estrato_{estrato}',
                    hovertext=f'Estrato {estrato}',
                    hoverinfo='text'
                ))

    # Punto central uniformado
    fig_estrato.add_trace(go.Scattermapbox(
        lat=[st.session_state.punto_lat],
        lon=[st.session_state.punto_lon],
        mode='markers',
        name='Punto de inter√©s',
        marker=dict(
            size=17,
            color='#3498DB'
        ),
        showlegend=True
    ))

    fig_estrato.update_layout(
        mapbox_style="carto-positron",
        mapbox_center={"lat": st.session_state.punto_lat, "lon": st.session_state.punto_lon},
        mapbox_zoom=14,
        margin={"r": 0, "t": 40, "l": 0, "b": 0},
        title="Distribuci√≥n de estratos socioecon√≥micos",
        showlegend=True,
        height=600,
        legend=dict(
            yanchor="top",
            y=0.99,
            xanchor="left",
            x=0.01,
            bgcolor="rgba(255, 255, 255, 0.8)"
        )
    )

    st.plotly_chart(fig_estrato, use_container_width=True)

    # Distribuci√≥n gr√°fica y num√©rica (profesional)
    st.markdown("**Resumen visual de estratos en el entorno:**")
    dist_estratos = manzanas_zona["estrato"].value_counts().sort_index()
    col1, col2 = st.columns([1, 1])
    with col1:
        for estrato, cantidad in dist_estratos.items():
            porcentaje = cantidad / len(manzanas_zona) * 100
            st.write(f"- Estrato {estrato}: {cantidad} manzanas ({porcentaje:.1f}%)")
    with col2:
        fig_estratobarras = go.Figure(data=[
            go.Bar(
                x=[f"E{e}" for e in dist_estratos.index],
                y=dist_estratos.values,
                marker_color=[color_estrato.get(e, '#808080') for e in dist_estratos.index],
                text=dist_estratos.values,
                textposition='auto',
            )
        ])
        fig_estratobarras.update_layout(
            title="Cantidad de manzanas por estrato",
            xaxis_title="Estrato",
            yaxis_title="Cantidad",
            height=300,
            margin=dict(l=20, r=20, t=40, b=20)
        )
        st.plotly_chart(fig_estratobarras, use_container_width=True)

        # ========================================
    # VISUALIZACI√ìN: USO DEL SUELO SEG√öN PLAN DE ORDENAMIENTO TERRITORIAL (POT)
    # ========================================
    st.markdown("""
    ### üó∫Ô∏è Distribuci√≥n de Usos del Suelo (POT)

    Este mapa te permite entender c√≥mo est√°n organizados los usos del suelo dentro del √°rea de an√°lisis, seg√∫n la planificaci√≥n oficial de Bogot√° (POT).
    Cada color corresponde a una categor√≠a de uso (residencial, dotacional, comercial, servicios, etc.), facilitando la identificaci√≥n de zonas homog√©neas, mixtas o de oportunidad.

    Observa la composici√≥n y diversificaci√≥n del entorno alrededor de tu punto de inter√©s.
    """)

    # Unificar con √°reas POT de la zona y asignar colores
    if "id_area" in manzanas_zona.columns and not areas.empty:
        manzanas_pot = manzanas_zona.merge(
            areas[["id_area", "uso_pot_simplificado"]],
            on="id_area",
            how="left"
        )
        manzanas_pot["uso_pot_simplificado"] = manzanas_pot["uso_pot_simplificado"].fillna("Sin clasificaci√≥n")
    else:
        manzanas_pot = manzanas_zona.copy()
        manzanas_pot["uso_pot_simplificado"] = "Sin clasificaci√≥n"

    usos_pot = sorted(manzanas_pot["uso_pot_simplificado"].unique())
    palette_pot = px.colors.qualitative.Plotly
    color_pot_map = {uso: palette_pot[i % len(palette_pot)] for i, uso in enumerate(usos_pot)}

    fig_pot = go.Figure()

    # Marco de √°rea de an√°lisis uniforme
    fig_pot.add_trace(go.Scattermapbox(
        lat=list(area_wgs.exterior.xy[1]),
        lon=list(area_wgs.exterior.xy[0]),
        mode='lines',
        name='√Årea de an√°lisis',
        line=dict(color='orange', width=2),
        showlegend=False
    ))

    trazas_agregadas_pot = set()
    for uso in usos_pot:
        manzanas_uso = manzanas_pot[manzanas_pot["uso_pot_simplificado"] == uso]
        for idx, (_, manzana) in enumerate(manzanas_uso.iterrows()):
            if manzana.geometry.geom_type == 'Polygon':
                coords = list(manzana.geometry.exterior.coords)
                mostrar_leyenda = uso not in trazas_agregadas_pot
                if mostrar_leyenda:
                    trazas_agregadas_pot.add(uso)
                fig_pot.add_trace(go.Scattermapbox(
                    lat=[c[1] for c in coords],
                    lon=[c[0] for c in coords],
                    mode='lines',
                    fill='toself',
                    fillcolor=color_pot_map.get(uso, '#808080'),
                    line=dict(color='black', width=0.5),
                    name=uso,
                    showlegend=mostrar_leyenda,
                    legendgroup=f'pot_{uso}',
                    hovertext=uso,
                    hoverinfo='text'
                ))

    # Punto central (azul uniforme)
    fig_pot.add_trace(go.Scattermapbox(
        lat=[st.session_state.punto_lat],
        lon=[st.session_state.punto_lon],
        mode='markers',
        name='Punto de inter√©s',
        marker=dict(
            size=17,
            color='#3498DB'
        ),
        showlegend=True
    ))

    fig_pot.update_layout(
        mapbox_style="carto-positron",
        mapbox_center={"lat": st.session_state.punto_lat, "lon": st.session_state.punto_lon},
        mapbox_zoom=14,
        margin={"r": 0, "t": 40, "l": 0, "b": 0},
        title="Distribuci√≥n de usos del suelo seg√∫n el POT",
        showlegend=True,
        height=600,
        legend=dict(
            yanchor="top",
            y=0.99,
            xanchor="left",
            x=0.01,
            bgcolor="rgba(255, 255, 255, 0.8)"
        )
    )

    st.plotly_chart(fig_pot, use_container_width=True)

    # Distribuci√≥n visual y texto
    st.markdown("**Resumen de usos del suelo en el √°rea de an√°lisis:**")
    dist_pot = manzanas_pot["uso_pot_simplificado"].value_counts()
    col1, col2 = st.columns([1, 1])
    with col1:
        for uso, cantidad in dist_pot.items():
            porcentaje = cantidad / len(manzanas_pot) * 100
            st.write(f"- {uso}: {cantidad} manzanas ({porcentaje:.1f}%)")
    with col2:
        fig_pot_barras = go.Figure(data=[
            go.Bar(
                x=[uso[:20] + '...' if len(uso) > 20 else uso for uso in dist_pot.index],
                y=dist_pot.values,
                marker_color=[color_pot_map.get(uso, '#808080') for uso in dist_pot.index],
                text=dist_pot.values,
                textposition='auto',
            )
        ])
        fig_pot_barras.update_layout(
            title="Cantidad de manzanas por uso POT",
            xaxis_title="Uso del suelo",
            yaxis_title="Cantidad",
            height=300,
            margin=dict(l=20, r=20, t=40, b=20)
        )
        st.plotly_chart(fig_pot_barras, use_container_width=True)

        
    # ========================================
    # INFORME AUTOMATIZADO
    # ========================================
    st.markdown("---")
    st.markdown("### üìã Informe Automatizado de Diagn√≥stico Territorial")
    
    # Calcular datos de la localidad completa
    manzanas_localidad = manzanas[manzanas["num_localidad"] == cod_localidad]
    
    # Contar estaciones totales en la localidad
    estaciones_localidad = []
    for _, row in transporte.iterrows():
        if hasattr(row["geometry"], "geoms"):
            for pt in row["geometry"].geoms:
                # Verificar si el punto est√° en alguna manzana de la localidad
                for _, manzana in manzanas_localidad.iterrows():
                    if manzana.geometry.contains(pt):
                        estaciones_localidad.append(pt)
                        break
    
    # Contar colegios totales en la localidad
    colegios_localidad = []
    for _, row in colegios.iterrows():
        if hasattr(row["geometry"], "geoms"):
            for pt in row["geometry"].geoms:
                for _, manzana in manzanas_localidad.iterrows():
                    if manzana.geometry.contains(pt):
                        colegios_localidad.append(pt)
                        break
    
    total_estaciones_loc = len(set([(pt.x, pt.y) for pt in estaciones_localidad]))
    total_colegios_loc = len(set([(pt.x, pt.y) for pt in colegios_localidad]))
    
    # Calcular porcentajes
    porcentaje_estaciones = (len(estaciones_buffer) / total_estaciones_loc * 100) if total_estaciones_loc > 0 else 0
    porcentaje_colegios = (len(colegios_buffer) / total_colegios_loc * 100) if total_colegios_loc > 0 else 0
    
    # Generar informe
    st.markdown(f"""
    #### Resumen Ejecutivo
    
    **Localidad Analizada:** {st.session_state.localidad_sel}  
    **Radio de An√°lisis:** {st.session_state.buffer_size} metros  
    **Coordenadas del Punto:** {st.session_state.punto_lat:.6f}, {st.session_state.punto_lon:.6f}
    
    ---
    
    #### üèòÔ∏è An√°lisis de Manzanas
    - **Total de manzanas en el buffer:** {len(manzanas_buffer)}
    - **Estrato predominante:** {manzanas_buffer['estrato'].mode()[0] if not manzanas_buffer.empty else 'N/A'}
    - **Uso del suelo predominante:** {dist_pot.index[0] if not dist_pot.empty else 'N/A'}
    
    #### üöá An√°lisis de Transporte
    - **Estaciones en el buffer:** {len(estaciones_buffer)}
    - **Total de estaciones en la localidad:** {total_estaciones_loc}
    - **Representaci√≥n:** {porcentaje_estaciones:.1f}% del total de la localidad
    
    **Diagn√≥stico:** {"‚úÖ El sector cuenta con buena cobertura de transporte" if len(estaciones_buffer) >= 2 else "‚ö†Ô∏è El sector tiene cobertura limitada de transporte"}
    
    #### üè´ An√°lisis Educativo
    - **Colegios en el buffer:** {len(colegios_buffer)}
    - **Total de colegios en la localidad:** {total_colegios_loc}
    - **Representaci√≥n:** {porcentaje_colegios:.1f}% del total de la localidad
    
    **Diagn√≥stico:** {"‚úÖ El sector cuenta con buena oferta educativa" if len(colegios_buffer) >= 2 else "‚ö†Ô∏è El sector tiene oferta educativa limitada"}
    
    #### üìä Evaluaci√≥n General
    """)
    
    # Evaluaci√≥n general
    score = 0
    if len(estaciones_buffer) >= 2:
        score += 1
    if len(colegios_buffer) >= 2:
        score += 1
    if len(manzanas_buffer) >= 10:
        score += 1
    
    if score == 3:
        st.success("‚úÖ **SECTOR BIEN DOTADO** - El √°rea analizada cuenta con buena disponibilidad de servicios y equipamientos urbanos.")
    elif score == 2:
        st.warning("‚ö†Ô∏è **SECTOR ACEPTABLE** - El √°rea cuenta con algunos servicios, pero hay oportunidades de mejora.")
    else:
        st.error("‚ùå **SECTOR CON D√âFICIT** - El √°rea presenta d√©ficit en la disponibilidad de servicios y equipamientos.")
    
    # Guardar datos para descarga
    st.session_state.informe_data = {
        "localidad": st.session_state.localidad_sel,
        "buffer_size": st.session_state.buffer_size,
        "manzanas": len(manzanas_buffer),
        "estaciones": len(estaciones_buffer),
        "colegios": len(colegios_buffer),
        "total_estaciones_loc": total_estaciones_loc,
        "total_colegios_loc": total_colegios_loc,
        "score": score
    }
    
    # Botones de navegaci√≥n
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîô Volver a Selecci√≥n de Punto"):
            st.session_state.step = 4
            st.rerun()
    
    with col2:
        if st.button("üì• Descargar Informe"):
            # Crear CSV con los datos
            import csv
            from io import StringIO
            
            csv_buffer = StringIO()
            writer = csv.writer(csv_buffer)
            writer.writerow(["Indicador", "Valor"])
            writer.writerow(["Localidad", st.session_state.localidad_sel])
            writer.writerow(["Buffer (m)", st.session_state.buffer_size])
            writer.writerow(["Manzanas", len(manzanas_buffer)])
            writer.writerow(["Estaciones", len(estaciones_buffer)])
            writer.writerow(["Colegios", len(colegios_buffer)])
            writer.writerow(["% Estaciones", f"{porcentaje_estaciones:.1f}"])
            writer.writerow(["% Colegios", f"{porcentaje_colegios:.1f}"])
            
            st.download_button(
                label="Descargar datos en CSV",
                data=csv_buffer.getvalue(),
                file_name=f"informe_{st.session_state.localidad_sel}_{st.session_state.buffer_size}m.csv",
                mime="text/csv"
            )
    
    with col3:
        if st.button("üîÑ Nuevo An√°lisis"):
            # Limpiar datos pero mantener datasets
            keys_to_keep = ["localidades", "areas", "manzanas", "transporte", "colegios"]
            keys_to_delete = [k for k in st.session_state.keys() if k not in keys_to_keep]
            for key in keys_to_delete:
                del st.session_state[key]
            st.session_state.step = 2
            st.rerun()
